[
  {
    "id": 104,
    "text": "#include <iostream>\nusing namespace std;\n\nint impare(int n){\n    int aux = n;\n    int copyN = 0;\n    int og = 0;\n    while(aux){\n        int c =aux %10;\n        if(c%2 != 0) copyN = copyN*10 + c;\n        copyN = copyN*10 + c;\n        aux /=10;\n    }\n\n    while(copyN){\n        og = og *10 + copyN%10;\n        copyN/=10;\n    }\n    if(og==n)\n    return -1;\n    return og;\n}\n\nint main () \n{\n    cout<<impare(26);\n    return 0;\n}"
  },
  {
    "id": 105,
    "text": "#include <iostream>\n#include <cstring>\n#include <fstream>\nusing namespace std;\nifstream fin(\"f.in\");\nofstream fout(\"f.out\");\nint n;\nchar lista[101][11], sablon[256], res[10][100], cntRes = 0;\nvoid citire()\n{\n    fin >> n;\n    fin.ignore();\n    for (int i = 0; i < n; i++)\n    {\n        char *p;\n        fin >> p;\n        strcpy(lista[i], p);\n        fin.ignore();\n    }\n    fin.ignore();\n    fin.get(sablon, 256);\n}\n\nbool isGeneric(char *word)\n{\n    if (word[0] == '*')\n        return true;\n    return false;\n}\n\nvoid rezolvare()\n{\n    bool ok = true;\n    char *p = strtok(sablon, \" \");\n    while (p && ok)\n    {\n\n        if (isGeneric(p))\n        {\n            bool verif = false; // presupun ca nu am cvnt inlocuitor pentru generic\n            char *copy;\n            for (int i = 0; i < n; i++)\n            {\n                if (strlen(lista[i]) == strlen(p))\n                {\n                    strcpy(res[cntRes++], lista[i]);\n                    verif = true;\n                    break;\n                }\n            }\n            if (!verif)\n                ok = false;\n        }\n        else\n\n        {\n            strcpy(res[cntRes++], p);\n        }\n        p = strtok(NULL, \" \");\n    }\n    if (!ok)\n        fout << \"imposibil\";\n    else\n        for (int i = 0; i < cntRes; i++)\n            fout << res[i] << \" \";\n}\nint main()\n{\n    citire();\n    rezolvare();\n    return 0;\n}"
  }
  ]